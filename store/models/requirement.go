package models

const (
	RequirementAdmissionStatusCreated = iota + 1
	RequirementAdmissionStatusSigned
	RequirementAdmissionStatusRevision
	RequirementAdmissionStatusAccepted
	RequirementAdmissionStatusDenied
	RequirementAdmissionStatusAcceptedWithRecommendation
)

var RequirementAdmissionStatuses = map[int]struct{}{
	RequirementAdmissionStatusCreated:                    {},
	RequirementAdmissionStatusSigned:                     {},
	RequirementAdmissionStatusRevision:                   {},
	RequirementAdmissionStatusAccepted:                   {},
	RequirementAdmissionStatusDenied:                     {},
	RequirementAdmissionStatusAcceptedWithRecommendation: {},
}

// RequirementAdmission represents all the data needed to submit a new requirement calculation admission.
type RequirementAdmission struct {
	RequirementId string `json:"kebutuhan_id"`
	// AdmissionTimestamp the time of the admission, usually, current time.
	AdmissionTimestamp EpochTime `json:"-"`
	PositionGrade      string    `json:"jabatan_jenjang"`
	// AgencyId (instansi ID) should be retrieved from ID token.
	AgencyId          string              `json:"-"`
	RequirementCounts []*RequirementCount `json:"jumlah_kebutuhan"`

	// A freetext indicating a fiscal year.
	FiscalYear string `json:"tahun_anggaran"`

	// A generic freetext again.
	AdmissionNumber string `json:"no_usulan"`

	// TempCoverLetter holds the full filename for surat pengantar.
	// The filename was generated by the backend, and is used to locate the cover letter in the temporary location.
	TempCoverLetter *Document `json:"temp_surat_pengantar"`
	// TempEstimationDocuments contains a list of UUIDs previously generated by us.
	// Each UUID in this array corresponds to a single temporary file previously uploaded by the frontend. The
	// UUID is a key that we give for each document. This way we understand which documents we need to drag from
	// the temporary locations to persistent storage/database.
	TempEstimationDocuments []*Document `json:"temp_dokumen_perhitungan"`

	// SubmitterAsnId is the ASN ID of the submitter (the user), can be retrieved from ID token.
	SubmitterAsnId string `json:"-"`
}

type RequirementAdmissionSignedDoc struct {
	Filename    string `json:"filename"`
	SignerAsnId string `json:"ttd_user_id"`
}

// RequirementAdmissionResult represents a single requirement admission returned.
type RequirementAdmissionResult struct {
	RequirementId      string    `json:"kebutuhan_id"`
	AdmissionTimestamp EpochTime `json:"tgl_usulan"`
	Status             int       `json:"status"`
	PositionGrade      string    `json:"jabatan_jenjang"`
	// A freetext indicating a fiscal year.
	FiscalYear string `json:"tahun_anggaran"`

	// A generic freetext again.
	AdmissionNumber string `json:"no_usulan"`
}

// RequirementCount indicates a requirement count, for each unit organisasi.
type RequirementCount struct {
	OrganizationUnitId  string `json:"unit_organisasi_id"`
	OrganizationUnit    string `json:"unit_organisasi"`
	Count               int    `json:"jumlah"`
	CountBezetting      int    `json:"jumlah_bezetting,omitempty"`
	CountRecommendation int    `json:"rekomendasi_jumlah,omitempty"`
}

// RequirementCountRecommendation represents a recommendation for requirement count per organization unit.
type RequirementCountRecommendation struct {
	OrganizationUnitId  string `json:"unit_organisasi_id"`
	CountRecommendation int    `json:"rekomendasi_jumlah"`
}

// RequirementRevision is a single entry in requirement revision history.
type RequirementRevision struct {
	DenyTimestamp EpochTime `json:"perbaikan_ts"`

	// RevisionReason is the reason why the admission needs to be revised.
	RevisionReason string `json:"alasan_perbaikan"`

	// RevisionRequirementCount is the requirement count provided by the submitter.
	RevisionRequirementCount int `json:"perbaikan_jumlah_kebutuhan"`
}

// RequirementAdmissionDetail represents single entry of requirement calculation admission.
type RequirementAdmissionDetail struct {
	RequirementId      string    `json:"kebutuhan_id"`
	AdmissionTimestamp EpochTime `json:"tgl_usulan"`
	Status             int       `json:"status"`
	// Deprecated: should be renamed to "FunctionalPositionId", we deal only with JF and not JFU or other kind of positions.
	// It is the ID counterpart of the FunctionalPosition.
	PositionGrade      string              `json:"jabatan_jenjang"`
	FunctionalPosition string              `json:"jabatan_fungsional,omitempty"`
	RequirementCounts  []*RequirementCount `json:"jumlah_kebutuhan"`

	// CoverLetter holds the full filename for surat pengantar.
	// The filename was generated by the backend, and is used to locate the cover letter in the permanent location.
	CoverLetter *Document `json:"surat_pengantar"`

	// RecommendationLetter holds the full filename for surat rekomendasi.
	// The filename was generated by the backend, and is used to locate the cover letter in the permanent location.
	// Can be null if not found.
	RecommendationLetter *Document `json:"surat_rekomendasi,omitempty"`

	// EstimationDocuments contains a list of UUIDs previously generated by us.
	// Each UUID in this array corresponds to a single file uploaded by the frontend.
	// The UUID is a key that we give for each document.
	EstimationDocuments []*Document `json:"dokumen_perhitungan"`

	// A freetext indicating a fiscal year.
	FiscalYear string `json:"tahun_anggaran"`

	// A generic freetext again.
	AdmissionNumber string `json:"no_usulan"`

	// RevisionReason, if exists.
	RevisionReason string `json:"alasan_perbaikan,omitempty"`

	// Revision for requirement counts, if exist.
	RevisionRequirementCounts []*RequirementCount `json:"perbaikan_jumlah_kebutuhan,omitempty"`

	AgencyId string `json:"instansi_id"`
}

// Bezetting represents the bezetting of old position grade and the new position grade for a
// requirement admission.
type Bezetting struct {
	PositionGradeId    string `json:"jabatan_id"`
	OrganizationUnitId string `json:"unit_organisasi_id"`
	Count              int    `json:"jumlah"`
}

// RequirementVerificationRequest represents a single requirement verification request.
type RequirementVerificationRequest struct {
	RequirementId string `json:"kebutuhan_id"`
	// AgencyId (instansi ID) should be retrieved from ID token.
	AgencyId string `json:"-"`

	// SubmitterAsnId is the ASN ID of the submitter (the user), can be retrieved from ID token.
	SubmitterAsnId string `json:"-"`

	// Note for the cover letter.
	CoverLetterNote string `json:"catatan_surat_pengantar"`

	// Notes for estimation documents.
	EstimationDocumentNotes []*struct {
		Filename string `json:"nama_file"`
		Note     string `json:"catatan"`
	} `json:"catatan_dokumen_perhitungan"`

	// Count recommendations.
	RequirementCounts []*RequirementCountRecommendation `json:"jumlah_kebutuhan"`
}

// RequirementRevisionRequest represents a single requirement deny request.
type RequirementRevisionRequest struct {
	RequirementId string `json:"kebutuhan_id"`
	// AgencyId (instansi ID) should be retrieved from ID token.
	AgencyId string `json:"-"`

	// DenyTimestamp the time of the deny request, usually, current time.
	DenyTimestamp EpochTime `json:"-"`

	// RevisionReason is the reason why the admission needs to be revised.
	RevisionReason string `json:"alasan_perbaikan"`

	// SubmitterAsnId is the ASN ID of the submitter (the user), can be retrieved from ID token.
	SubmitterAsnId string `json:"-"`

	// Note for the cover letter.
	CoverLetterNote string `json:"catatan_surat_pengantar"`

	// Notes for estimation documents.
	EstimationDocumentNotes []*struct {
		Filename string `json:"nama_file"`
		Note     string `json:"catatan"`
	}

	// Count recommendations.
	RequirementCounts []*RequirementCountRecommendation `json:"jumlah_kebutuhan"`
}

// RequirementVerifier represents single entry of requirement verifier.
type RequirementVerifier struct {
	AsnId                   string `json:"pejabat_id"`
	RequirementVerifierName string `json:"nama_pejabat"`
}
