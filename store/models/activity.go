package models

import (
	"errors"
	"fmt"
)

const (
	ActivityAdmissionStatusCreated = iota + 1
	ActivityAdmissionStatusAccepted
	// Deprecated, now skipped directly to cert published.
	ActivityAdmissionStatusCertRequest
	ActivityAdmissionStatusCertPublished
	ActivityAdmissionStatusRejected
)

var ActivityAdmissionStatuses = map[int]struct{}{
	ActivityAdmissionStatusCreated:       {},
	ActivityAdmissionStatusAccepted:      {},
	ActivityAdmissionStatusCertPublished: {},
	ActivityAdmissionStatusRejected:      {},
}

const (
	// Deprecated: no longer used.
	ActivityTypeWorkshop = iota + 1
	// Deprecated: no longer used.
	ActivityTypeBimtek
	// Deprecated: no longer used.
	// ActivityTypeTraining is a type of activity Pelatihan.
	ActivityTypeTraining
	// Deprecated: no longer used.
	ActivityTypeCertification
	// Deprecated: no longer used.
	ActivityTypeAccreditation
	// Deprecated: no longer used.
	// ActivityTypePromotionExam belongs to all kinds of uji kompetensi naik jenjang.
	ActivityTypePromotionExam
	// Deprecated: no longer used.
	// ActivityTypeMutationExam belongs to all kinds of uji kompetensi perpindahan jabatan.
	ActivityTypeMutationExam
	// ActivityTypeFunctionalTraining belongs to all kinds of pelatihan fungsional.
	ActivityTypeFunctionalTraining
	// ActivityTypeTechnicalTraining belongs to all kinds of pelatihan teknis.
	ActivityTypeTechnicalTraining
	// ActivityTypeManagementTraining belongs to all kinds of pelatihan manajerial.
	ActivityTypeManagementTraining
	// ActivityTypeSocioculturalTraining belongs to all kinds of pelatihan sosio-kultural.
	ActivityTypeSocioculturalTraining
)

var ActivityTypes = map[int]string{
	ActivityTypeWorkshop:              "Workshop",
	ActivityTypeBimtek:                "Bimtek",
	ActivityTypeTraining:              "Pelatihan",
	ActivityTypeCertification:         "Sertifikasi",
	ActivityTypeAccreditation:         "Akreditasi",
	ActivityTypePromotionExam:         "Uji Kompetensi Naik Jenjang",
	ActivityTypeMutationExam:          "Uji Kompetensi Peripindahan Jabatan",
	ActivityTypeFunctionalTraining:    "Pelatihan Fungsional",
	ActivityTypeTechnicalTraining:     "Pelatihan Teknis",
	ActivityTypeManagementTraining:    "Pelatihan Manajerial",
	ActivityTypeSocioculturalTraining: "Pelatihan Sosio-kultural",
}

// ErrActivityTypeInvalid is thrown if the submitted activity admission has invalid type.
var ErrActivityTypeInvalid error

func init() {
	activityTypeString := "supported activity type codes: "
	i := 0
	for activityTypeCode, activityType := range ActivityTypes {
		activityTypeString += fmt.Sprintf("%d => %s", activityTypeCode, activityType)
		if i < len(ActivityTypes) {
			activityTypeString += ", "
		}
	}
	ErrActivityTypeInvalid = errors.New(activityTypeString)
}

// ActivityAdmission represents a single activity admission request.
type ActivityAdmission struct {
	ActivityId  string `json:"kegiatan_id"`
	Name        string `json:"nama"`
	Status      int    `json:"status"`
	Type        int    `json:"jenis"`
	Description string `json:"deskripsi"`
	// AdmissionTimestamp the time of the admission, usually, current time.
	AdmissionTimestamp EpochTime   `json:"waktu_pengajuan"`
	StartDate          Iso8601Date `json:"tgl_mulai"`
	EndDate            Iso8601Date `json:"tgl_selesai"`
	PositionGrade      string      `json:"jabatan_jenjang"`
	// AgencyId (instansi ID) should be retrieved from ID token.
	AgencyId     string `json:"-"`
	Extra        string `json:"data_tambahan"`
	TrainingYear int    `json:"tahun_diklat"`
	// Duration, in hour.
	Duration        int    `json:"durasi"`
	AdmissionNumber string `json:"no_usulan"`
	OrganizerAgency string `json:"instansi_penyelenggara"`

	// TempSupportDocuments contains a list of UUIDs previously generated by us.
	// Each UUID in this array corresponds to a single temporary file previously uploaded by the frontend. The
	// UUID is a key that we give for each document. This way we understand which documents we need to drag from
	// the temporary locations to persistent storage/database.
	TempSupportDocuments []*Document `json:"temp_dokumen_pendukung,omitempty"`

	// Attendees contains a list of ASN ID that will attend the event/activity.
	Attendees []string `json:"peserta_user_id,omitempty"`

	// SubmitterAsnId is the ASN ID of the submitter (the user), can be retrieved from ID token.
	SubmitterAsnId string `json:"-"`

	// AttendeesDetail is the list of attendees for the activity.
	AttendeesDetail []*ActivityAttendee `json:"peserta,omitempty"`

	// SupportDocuments is the list of supporting documents metadata for a particular activity admission.
	SupportDocuments []*Document `json:"dokumen_pendukung,omitempty"`
}

// Deprecated: User Document
// SupportDocument is the metadata of document such as supporting PDF stored in the object storage.
type SupportDocument struct {
	// Filename is the document's unique id.
	Filename string `json:"nama_file"`

	// DocumentName is the human-readable name of the document.
	DocumentName string `json:"nama_dokumen"`
}

const (
	// ActivityCertTypeCert is a type code that represent a certificate document.
	ActivityCertTypeCert = iota + 1
	// ActivityCertTypePak is a type code that represent a PAK document.
	// This document is only available for uji kompetensi pindah jabatan.
	ActivityCertTypePak
)

var ActivityCertTypes = map[int]struct{}{
	ActivityCertTypeCert: {},
	ActivityCertTypePak:  {},
}

// ActivityCertGenRequest holds all the data required for pembina JF to issue a certificate.
type ActivityCertGenRequest struct {
	ActivityId     string `json:"kegiatan_id"`
	SubmitterAsnId string `json:"-"`
	// AgencyId should be retrieved from ID token to prevent users from changing other activities.
	AgencyId         string                 `json:"-"`
	AttendeesPassing []*ActivityAttendeeCsr `json:"kelulusan_peserta"`
	Signing          ActivitySigning        `json:"penandatangan"`
	TemplateId       string                 `json:"template_id"`
}

// ActivityAttendeeCsr represents a single entity for requesting a certificate for attendee.
type ActivityAttendeeCsr struct {
	DocumentNumber string      `json:"no_surat"`
	DocumentDate   Iso8601Date `json:"tgl_surat"`
	SignerAsnId    string      `json:"ttd_user_id"`
	AttendeeAsnId  string      `json:"peserta_user_id"`
	Type           int         `json:"jenis"`
	Score          float32     `json:"nilai"`
	IsPassing      bool        `json:"kelulusan"`
	ReasonRejected string      `json:"alasan_tidak_lulus"`
}

// ActivityAttendeeCsr represents a single entity for requesting a certificate for attendee.
type ActivitySigning struct {
	JabtanInstansiPengusul           string `json:"jabatan_instansi_pengusul"`
	NamaPejabatInstansiPengusul      string `json:"nama_pejabat_instansi_pengusul"`
	NipPejabatInstansiPnegusul       string `json:"nip_pejabat_instansi_pengusul"`
	JabatanInstansiPenyelenggara     string `json:"jabatan_instansi_penyelenggara"`
	NamaPejabatInstansiPenyelenggara string `json:"nama_pejabat_instansi_penyelenggara"`
	NipPejabatInstansiPenyelanggara  string `json:"nip_pejabat_instansi_penyelenggara"`
	JabatanPemateri                  string `json:"jabatan_pemateri"`
	NamaPemateri                     string `json:"nama_pemateri"`
	NipPemateri                      string `json:"nip_pemateri"`
}

// ActivityCertificate represents a single document, can be a certificate or PAK.
type ActivityCertificate struct {
	DocumentNumber string      `json:"no_surat"`
	DocumentDate   Iso8601Date `json:"tgl_surat"`
	SignerAsnId    string      `json:"ttd_user_id"`
	AttendeeAsnId  string      `json:"peserta_user_id"`
	Type           int         `json:"jenis"`
	Score          float32     `json:"nilai"`
}

// ActivityCertGenUploadRequest represents a single request to upload a single activity certificate/PAK.
// Can be decoded as JSON or as query parameters (schema).
type ActivityCertGenUploadRequest struct {
	ActivityId    string `json:"kegiatan_id" schema:"kegiatan_id"`
	AttendeeAsnId string `json:"peserta_user_id" schema:"peserta_user_id"`
	Type          int    `json:"jenis" schema:"jenis"`
	// AgencyId should be retrieved from ID token to prevent users from changing other activities.
	AgencyId string `json:"-"`
}

// ActivityCertGenDownloadRequest represents a single request to download a single activity certificate/PAK.
// Can be decoded as JSON or as query parameters (schema).
type ActivityCertGenDownloadRequest struct {
	ActivityId      string `json:"kegiatan_id" schema:"kegiatan_id"`
	AttendeeAsnId   string `json:"peserta_user_id" schema:"peserta_user_id"`
	ForceRegenerate bool   `json:"force" schema:"force"`
}

// ActivityCsrRequest holds all the data required for agencies to submit a certificate signing request.
type ActivityCsrRequest struct {
	ActivityId     string `json:"kegiatan_id"`
	SubmitterAsnId string `json:"-"`
	// AgencyId should be retrieved from ID token to prevent users from changing other activities.
	AgencyId string `json:"-"`

	// AttendeesPassing is a list of ASN ID, whether they pass or not, and what the reason if rejected.
	AttendeesPassing []*ActivityCsrAttendee `json:"kelulusan_peserta"`
}

// ActivityCsrAttendee represents a single activity attendees containing their id, whether they accepted or not, and the
// reason if they unaccepted.
type ActivityCsrAttendee struct {
	AsnId          string `json:"user_id"`
	IsPassing      bool   `json:"kelulusan"`
	ReasonRejected string `json:"alasan_ditolak"`
}

type ActivityRecommendationLetterAdmission struct {
	ActivityId     string `json:"kegiatan_id"`
	SubmitterAsnId string `json:"-"`
	// AgencyId should be retrieved from ID token to prevent users from changing other activities.
	AgencyId string `json:"-"`

	RecommendationLetter *Document `json:"surat_rekomendasi"`

	SignerAsnId string `json:"ttd_user_id"`
}

// ActivityVerificationRequest represents a single activity verification request.
type ActivityVerificationRequest struct {
	ActivityId string `json:"kegiatan_id"`

	// AttendeesAcceptance is a list of ASN ID, whether they accepted or not, and what the reason if rejected.
	AttendeesAcceptance []*ActivityAttendee `json:"penerimaan_peserta"`

	// SubmitterAsnId is the ASN ID of the submitter (the user), can be retrieved from ID token.
	SubmitterAsnId string `json:"-"`
	// AgencyId should be retrieved from ID token to prevent users from changing other activities.
	AgencyId string `json:"-"`
}

// ActivityAttendee represents a single activity attendees containing their id, whether they accepted or not, and the
// reason if they unaccepted.
type ActivityAttendee struct {
	AsnId            string               `json:"user_id"`
	Nip              string               `json:"nip"`
	IsAccepted       bool                 `json:"penerimaan"`
	ReasonRejected   string               `json:"alasan_ditolak"`
	IsPassing        bool                 `json:"kelulusan"`
	ReasonNotPassing string               `json:"alasan_tidak_lulus"`
	AsnName          string               `json:"nama,omitempty"`
	Certificate      *ActivityCertificate `json:"sertifikat,omitempty"`
}
